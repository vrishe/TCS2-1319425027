{-

  TASK 5 - Address encoder
  Write the method that for any valid MsgAddressInt with addr_std constructor
  without anycast
  (see https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L105)
 returns the slice that contain ASCII encoded base64url user-friendly bouncable
 address (without test-only flag), see https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
-}

#include "main.fc";

;; addr_none$00 = MsgAddressExt;
;; addr_extern$01 len:(## 9) external_address:(bits len) 
;;              = MsgAddressExt;
;; anycast_info$_ depth:(#<= 30) { depth >= 1 }
;;    rewrite_pfx:(bits depth) = Anycast;
;; addr_std$10 anycast:(Maybe Anycast) 
;;    workchain_id:int8 address:bits256  = MsgAddressInt;
;; addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9) 
;;    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
;; _ _:MsgAddressInt = MsgAddress;
;; _ _:MsgAddressExt = MsgAddress;

;; B) "User-friendly", which is obtained by first generating:

;; one tag byte (0x11 for "bounceable" addresses, 0x51 for "non-bounceable"; add +0x80 if the address
;; should not be accepted by software running in the production network) one byte containing a signed
;; 8-bit integer with the workchain_id (0x00 for the basic workchain, 0xff for the masterchain)
;; 32 bytes containing 256 bits of the smart-contract address inside the workchain (big-endian)
;; 2 bytes containing CRC16-CCITT of the previous 34 bytes
;;
;; In case B), the 36 bytes thus obtained are then encoded using base64 (i.e., with digits, upper- 
;; and lowercase Latin letters, '/' and '+') or base64url (with '_' and '-' instead of '/' and '+'),
;; yielding 48 printable non-space characters.

;; smca>$ (x y z â€“ S), packs a standard TON smart-contract address
;; with workchain x (a signed 32-bit Integer) and in-workchain address y
;; (an unsigned 256-bit Integer ) into a 48-character string S (the humanreadable representation of the address) according to flags z. Possible individual flags in z are: +1 for non-bounceable addresses, +2 for
;; testnet-only addresses, and +4 for base64url output instead of base64.
;; (slice, slice) to_string(slice addr, int flags) impure asm
;;   "OVER" "8 LDI" "256 PLDU" "ROT" "DUMPSTK"
;;   ;; "smca>$"
;;   "NEWC" "STSLICE" "ENDC" "CTOS";

;;"<b 8 i@+ 256 u@+ 3 roll smca>$ $, b> <s swap";
;;(slice, int) sook(slice addr, int flags) impure asm( -> 1 0) "LDUX";

(slice) base64url(slice data);

(int) crc16_(slice data); ;; seems like crc16 name conflicts with existing Fift word

;; testable
(slice) encode_address(slice Address) method_id {
  var tag_any = Address~load_uint(3);
  if tag_any == 4 { ;; addr_std, no anycast
    slice addr = begin_cell()
      .store_uint(0x11, 8)
      .store_slice(Address)
      .end_cell().begin_parse();

    var cc = crc16_(addr);
    slice addr_crc = begin_cell()
      .store_slice(addr)
      .store_uint(cc, 16)
      .end_cell().begin_parse();

    return(base64url(addr_crc));
    ;; return("kf_8uRo6OBbQ97jCx2EIuKm8Wmt6Vb15-KsQHFLbKSMiYIny");
  }

  return null();
}

;; BASE64url
;; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
(slice) base64url(slice data) method_id {
  slice alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

  builder result = begin_cell();
  while data.slice_bits() >= 24 {
    var chunk = data~load_uint(24);
    (_, int d) = alphabet.skip_bits(8 * ( chunk        & 0x3f)).load_uint(8);
    (_, int c) = alphabet.skip_bits(8 * ((chunk >> 6)  & 0x3f)).load_uint(8);
    (_, int b) = alphabet.skip_bits(8 * ((chunk >> 12) & 0x3f)).load_uint(8);
    (_, int a) = alphabet.skip_bits(8 * ((chunk >> 18) & 0x3f)).load_uint(8);

    result~store_uint(a, 8);
    result~store_uint(b, 8);
    result~store_uint(c, 8);
    result~store_uint(d, 8);
  }

  ;; Currently we ignore that fact data length can be non-multiple of 24 bits.

  return result.end_cell().begin_parse();
}

;; static const uint16 crc16_table[256] = {
;;     0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad,
;;     0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a,
;;     0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b,
;;     0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
;;     0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861,
;;     0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96,
;;     0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87,
;;     0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
;;     0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,
;;     0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3,
;;     0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290,
;;     0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
;;     0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e,
;;     0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f,
;;     0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c,
;;     0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
;;     0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83,
;;     0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,
;;     0x2e93, 0x3eb2, 0x0ed1, 0x1ef0};

;; uint16 crc16(Slice data) {
;;   uint32 crc = 0;
;;   for (auto c : data) {
;;     auto t = (static_cast<unsigned char>(c) ^ (crc >> 8)) & 0xff;
;;     crc = crc16_table[t] ^ (crc << 8);
;;   }
;;   return static_cast<uint16>(crc);
;; }

(int) crc16_(slice data) method_id {
  slice _000cell = "0000102120423063408450a560c670e781089129a14ab16bc18cd1ade1cef1ef123102103273225252b5429472f762d693398318b37ba35ad3bdc39cf3ffe3de246234430420140164e674c744a45485a56ab54b85289509e5eef5cfc5acd58d365326721611063076d766f6569546b4b75ba77a97198738f7dfe7fed79d"s;
  slice _063cell = "c7bc48c458e5688678a70840186128023823c9ccd9ede98ef9af89489969a90ab92b5af54ad47ab76a961a710a503a332a12dbfdcbdcfbbfeb9e9b798b58bb3bab1a6ca67c874ce45cc52c223c030c601c41edaefd8fcdecddcdad2abd0b8d689d497e976eb65ed54ef43e132e321e510e70ff9fefbedfddcffcbf1baf3a"s;
  slice _126cell = "9f598f78918881a9b1caa1ebd10cc12df14ee16f108000a130c220e3500440257046606783b99398a3fbb3dac33dd31ce37ff35e02b1129022f332d24235521462777256b5eaa5cb95a88589f56ee54fd52cc50d34e224c314a004817466644754244405a7dbb7fa879997b8e75ff77ec71dd73c26d336f2069116b06657"s;
  slice _189cell = "767646155634d94cc96df90ee92f99c889e9b98aa9ab584448657806682718c008e1388228a3cb7ddb5ceb3ffb1e8bf99bd8abbbbb9a4a755a546a377a160af11ad02ab33a92fd2eed0fdd6ccd4dbdaaad8b9de88dc97c266c075c644c453ca22c831ce00cc1ef1fff3ecf5ddf7caf9bbfba8fd99ff86e177e364e555e74"s;
  slice _252cell = "2e933eb20ed11ef0"s;

  int crc = 0;
  while data.slice_bits() >= 8 {
    var t = (data~load_uint(8) ^ (crc >> 8)) & 0xff;
    if t < 63 {
      (_, t) = _000cell.skip_bits(16 * t).load_uint(16);
    }
    else { if t < 126 {
      (_, t) = _063cell.skip_bits(16 * (t - 63)).load_uint(16);
    }
    else { if t < 189 {
      (_, t) = _126cell.skip_bits(16 * (t - 126)).load_uint(16);
    }
    else { if t < 252 {
      (_, t) = _189cell.skip_bits(16 * (t - 189)).load_uint(16);
    }
    else {
      (_, t) = _252cell.skip_bits(16 * (t - 252)).load_uint(16);
    } } } }

    crc = t ^ ((crc << 8) & 0xffffffff);
  }

  return(crc & 0xffff);
}